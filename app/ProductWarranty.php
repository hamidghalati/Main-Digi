<?php

    namespace App;

    use Illuminate\Database\Eloquent\Model;
    use Illuminate\Database\Eloquent\SoftDeletes;

    class ProductWarranty extends Model
    {
        use SoftDeletes;

        protected $table = 'product_warranties';
        protected $fillable = ['product_id', 'warranty_id', 'color_id'
            , 'price1', 'price2', 'send_time', 'seller_id', 'product_number', 'product_number_cart',
            'offers_first_date', 'offers_last_date', 'offers_first_time', 'offers_last_time', 'offers', 'show_index'];

        public static function getDate($request)
        {
            $string = '?';
            $products_warranties = self::with('getColor', 'getWarranty')->orderBy('id', 'Desc');
            if (inTrashed($request)) {
                $products_warranties = $products_warranties->onlyTrashed();
                $string = create_paginate_url($string, 'trashed=true');
            }

            if (array_key_exists('string', $request) && !empty($request['string'])) {
                $products_warranties = $products_warranties->where('title', 'like', '%' . $request['string'] . '%');
                $string = create_paginate_url($string, 'string=' . $request['string']);
            }


            $products_warranties = $products_warranties->paginate(10);
            $products_warranties->withPath($string);
            return $products_warranties;
        }

        public function getColor()
        {
            return $this->belongsTo(ColorModel::class, 'color_id', 'id')
                ->withDefault(['name' => '', 'id' => 0]);
        }

        public function getWarranty()
        {
            return $this->belongsTo(WarrantyModel::class, 'warranty_id', 'id');
        }


        protected static function boot()
        {
            parent::boot(); // TODO: Change the autogenerated stub
            static::restored(function ($warranty) {
                add_min_product_price($warranty);
                $product = ProductsModel::select('id', 'price', 'status')->where('id', $warranty->product_id)->withTrashed()->first();
                update_product_price($product);
            });

            static::deleted(function ($warranty) {
                check_has_product_warranty($warranty);
                $product = ProductsModel::select('id', 'price', 'status')->where('id', $warranty->product_id)->withTrashed()->first();
                update_product_price($product);

            });
        }

        public function getProduct()
        {
            return $this->hasOne(ProductsModel::class, 'id', 'product_id')->select(['id', 'title', 'image_url', 'cat_id', 'product_url']);
        }

        public function itemValue()
        {
            return $this->hasMany(ItemValueModel::class, 'product_id', 'product_id');
        }


    }
